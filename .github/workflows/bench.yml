name: Benchmark

on:
  push:
  workflow_dispatch:
    inputs:
      tbBranch:
        description: 'TDengine branch'
        required: true
        type: string


jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    outputs:
      commit_id: ${{ steps.get_commit_id.outputs.commit_id }}
    steps:
      - name: checkout TDengine by push
        if: github.event_name == 'push'
        uses: actions/checkout@v4
        with:
          repository: 'taosdata/TDengine'
          path: 'TDengine'
          ref: 'feat/new-libtaos-with-ws'

      - name: checkout TDengine manually
        if: github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v4
        with:
          repository: 'taosdata/TDengine'
          path: 'TDengine'
          ref: ${{ inputs.tbBranch }}

      - name: get_commit_id
        id: get_commit_id
        run: |
          cd TDengine
          echo "commit_id=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Cache server by push
        if: github.event_name == 'push'
        id: cache-server-push
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-libtaos-${{ steps.get_commit_id.outputs.commit_id }}

      - name: Cache server manually
        if: github.event_name == 'workflow_dispatch'
        id: cache-server-manually
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-${{ inputs.tbBranch }}-${{ steps.get_commit_id.outputs.commit_id }}


      - name: install TDengine
        if: >
          (github.event_name == 'workflow_dispatch' && steps.cache-server-manually.outputs.cache-hit != 'true') ||
          (github.event_name == 'push' && steps.cache-server-push.outputs.cache-hit != 'true')
        run: |
          sudo apt-get install libgoogle-perftools-dev libjansson-dev libsnappy-dev liblzma-dev zlib1g-dev
          cd TDengine
          mkdir debug
          cd debug
          cmake .. -DBUILD_TEST=off -DWEBSOCKET=true -DBUILD_TOOLS=1 -DBUILD_HTTP=false -DBUILD_DEPENDENCY_TESTS=0 -DVERNUMBER=3.9.9.9
          make -j 4

      - name: package
        if: >
          (github.event_name == 'workflow_dispatch' && steps.cache-server-manually.outputs.cache-hit != 'true') ||
          (github.event_name == 'push' && steps.cache-server-push.outputs.cache-hit != 'true')
        run: |
          mkdir -p ./release
          cp ./TDengine/debug/build/bin/taos ./release/
          cp ./TDengine/debug/build/bin/taosd ./release/
          cp ./TDengine/debug/build/bin/taosBenchmark ./release/
          cp ./TDengine/tools/taosadapter/taosadapter ./release/
          cp ./TDengine/debug/build/lib/libtaos.so.3.9.9.9 ./release/
          cp ./TDengine/debug/build/lib/libtaosnative.so.3.9.9.9 ./release/
          cp ./TDengine/debug/build/lib/libtaosws.so ./release/
          cp ./TDengine/include/client/taos.h ./release/
          cat >./release/install.sh<<EOF 
          chmod +x ./taos
          chmod +x ./taosd
          chmod +x ./taosadapter
          chmod +x ./taosBenchmark
          cp ./taos /bin/
          cp ./taosd /bin/
          cp ./taosadapter /bin/
          cp ./taosBenchmark /bin/
          cp ./libtaos.so.3.9.9.9 /usr/lib
          cp ./libtaosnative.so.3.9.9.9 /usr/lib
          cp ./libtaosws.so /usr/lib
          ln -sf /usr/lib/libtaos.so.3.9.9.9 /usr/lib/libtaos.so.1
          ln -sf /usr/lib/libtaos.so.1 /usr/lib/libtaos.so
          ln -sf /usr/lib/libtaosnative.so.3.9.9.9 /usr/lib/libtaosnative.so.1
          ln -sf /usr/lib/libtaosnative.so.1 /usr/lib/libtaosnative.so
          ln -sf /usr/lib/libtaosnative.so.1 /usr/lib/libtaosnative.so
          ln -sf /usr/lib/librocksdb.so.8.1.1 /usr/lib/librocksdb.so.8 ||:
          ln -sf /usr/lib/librocksdb.so.8 /usr/lib/librocksdb.so ||:
          cp ./taos.h /usr/include
          EOF
          tar -zcvf server.tar.gz ./release

  test:
    runs-on: ubuntu-latest
    needs: build
    name: test
    steps:
      - name: get cache server by push
        if: github.event_name == 'push'
        id: get-cache-server-push
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-libtaos-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ runner.os }}-build-libtaos-

      - name: cache server manually
        if: github.event_name == 'workflow_dispatch'
        id: get-cache-server-manually
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-${{ inputs.tbBranch }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ runner.os }}-build-${{ inputs.tbBranch }}-


      - name: install
        run: |
          sudo apt-get install libgoogle-perftools-dev libjansson-dev libsnappy-dev liblzma-dev zlib1g-dev
          tar -zxvf server.tar.gz
          cd release && sudo sh install.sh

      - name: checkout
        uses: actions/checkout@v4

      - name: copy taos cfg
        run: |
          sudo mkdir -p /etc/taos
          sudo cp ./.github/workflows/taos.cfg /etc/taos/taos.cfg
          sudo cp ./.github/workflows/taosadapter.toml /etc/taos/taosadapter.toml

      - name: shell
        run: |
          cat >start.sh<<EOF 
          ulimit -n 65535 && TAOS_SUPPORT_VNODES=256 taosd
          EOF

      - name: taosd
        run: nohup sudo sh ./start.sh &

      - name: start taosadapter
        run: sudo taosadapter &

      - name: prepare_dir
        run: |
          sudo mkdir -p /test_report
      - name: insert_and_query
        run: |
          echo "start insert and query test"
          sudo taosBenchmark -f insert.json -Z native -o /test_report/insert_native_1
          echo "insert_native_1 done"
          sudo taosBenchmark -f insert.json -Z native -o /test_report/insert_native_2
          echo "insert_native_2 done"
          sudo taosBenchmark -f insert.json -Z native -o /test_report/insert_native_3
          echo "insert_native_3 done"
          sudo taosBenchmark -f insert.json -Z websocket -o /test_report/insert_ws_1
          echo "insert_ws_1 done"
          sudo taosBenchmark -f insert.json -Z websocket -o /test_report/insert_ws_2
          echo "insert_ws_2 done"
          sudo taosBenchmark -f insert.json -Z websocket -o /test_report/insert_ws_3
          echo "insert_ws_3 done"
          sudo taosBenchmark -f query.json -Z native -o /test_report/query_native_1
          echo "query_native_1 done"
          sudo taosBenchmark -f query.json -Z native -o /test_report/query_native_2
          echo "query_native_2 done"
          sudo taosBenchmark -f query.json -Z native -o /test_report/query_native_3
          echo "query_native_3 done"
          sudo taosBenchmark -f query.json -Z websocket -o /test_report/query_ws_1
          echo "query_ws_1 done"
          sudo taosBenchmark -f query.json -Z websocket -o /test_report/query_ws_2
          echo "query_ws_2 done"
          sudo taosBenchmark -f query.json -Z websocket -o /test_report/query_ws_3
          echo "query_ws_3 done"
          sudo taosBenchmark -f stmt2.json -Z native -o /test_report/stmt2_native_1
          echo "stmt2_native_1 done"
          sudo taosBenchmark -f stmt2.json -Z native -o /test_report/stmt2_native_2
          echo "stmt2_native_2 done"
          sudo taosBenchmark -f stmt2.json -Z native -o /test_report/stmt2_native_3
          echo "stmt2_native_3 done"
          sudo taosBenchmark -f stmt2.json -Z websocket -o /test_report/stmt2_ws_1
          echo "stmt2_ws_1 done"
          sudo taosBenchmark -f stmt2.json -Z websocket -o /test_report/stmt2_ws_2
          echo "stmt2_ws_2 done"
          sudo taosBenchmark -f stmt2.json -Z websocket -o /test_report/stmt2_ws_3
          echo "stmt2_ws_3 done"

      - name: Get CPU cores
        run: echo "CORES=$(nproc)" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: result-cpu-${{ env.CORES }}-threads-1
          path: /test_report


  test_8threads:
    runs-on: ubuntu-latest
    needs: build
    name: test_8threads
    steps:
      - name: get cache server by push
        if: github.event_name == 'push'
        id: get-cache-server-push
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-libtaos-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ runner.os }}-build-libtaos-

      - name: cache server manually
        if: github.event_name == 'workflow_dispatch'
        id: get-cache-server-manually
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-${{ inputs.tbBranch }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ runner.os }}-build-${{ inputs.tbBranch }}-


      - name: install
        run: |
          sudo apt-get install libgoogle-perftools-dev libjansson-dev libsnappy-dev liblzma-dev zlib1g-dev
          tar -zxvf server.tar.gz
          cd release && sudo sh install.sh

      - name: checkout
        uses: actions/checkout@v4

      - name: copy taos cfg
        run: |
          sudo mkdir -p /etc/taos
          sudo cp ./.github/workflows/taos.cfg /etc/taos/taos.cfg
          sudo cp ./.github/workflows/taosadapter.toml /etc/taos/taosadapter.toml

      - name: shell
        run: |
          cat >start.sh<<EOF 
          ulimit -n 65535 && TAOS_SUPPORT_VNODES=256 taosd
          EOF

      - name: taosd
        run: nohup sudo sh ./start.sh &

      - name: start taosadapter
        run: sudo taosadapter &

      - name: prepare_dir
        run: |
          sudo mkdir -p /test_report
      - name: insert_and_query
        run: |
          echo "start insert and query test"
          sudo taosBenchmark -f insert_8.json -Z native -o /test_report/insert_native_1
          echo "threads 8 insert_native_1 done"
          sudo taosBenchmark -f insert_8.json -Z native -o /test_report/insert_native_2
          echo "threads 8 insert_native_2 done"
          sudo taosBenchmark -f insert_8.json -Z native -o /test_report/insert_native_3
          echo "threads 8 insert_native_3 done"
          sudo taosBenchmark -f insert_8.json -Z websocket -o /test_report/insert_ws_1
          echo "threads 8 insert_ws_1 done"
          sudo taosBenchmark -f insert_8.json -Z websocket -o /test_report/insert_ws_2
          echo "threads 8 insert_ws_2 done"
          sudo taosBenchmark -f insert_8.json -Z websocket -o /test_report/insert_ws_3
          echo "threads 8 insert_ws_3 done"
          sudo taosBenchmark -f query_8.json -Z native -o /test_report/query_native_1
          echo "threads 8 query_native_1 done"
          sudo taosBenchmark -f query_8.json -Z native -o /test_report/query_native_2
          echo "threads 8 query_native_2 done"
          sudo taosBenchmark -f query_8.json -Z native -o /test_report/query_native_3
          echo "threads 8 query_native_3 done"
          sudo taosBenchmark -f query_8.json -Z websocket -o /test_report/query_ws_1
          echo "threads 8 query_ws_1 done"
          sudo taosBenchmark -f query_8.json -Z websocket -o /test_report/query_ws_2
          echo "threads 8 query_ws_2 done"
          sudo taosBenchmark -f query_8.json -Z websocket -o /test_report/query_ws_3
          echo "threads 8 query_ws_3 done"
          sudo taosBenchmark -f stmt2_8.json -Z native -o /test_report/stmt2_native_1
          echo "threads 8 stmt2_native_1 done"
          sudo taosBenchmark -f stmt2_8.json -Z native -o /test_report/stmt2_native_2
          echo "threads 8 stmt2_native_2 done"
          sudo taosBenchmark -f stmt2_8.json -Z native -o /test_report/stmt2_native_3
          echo "threads 8 stmt2_native_3 done"
          sudo taosBenchmark -f stmt2_8.json -Z websocket -o /test_report/stmt2_ws_1
          echo "threads 8 stmt2_ws_1 done"
          sudo taosBenchmark -f stmt2_8.json -Z websocket -o /test_report/stmt2_ws_2
          echo "threads 8 stmt2_ws_2 done"
          sudo taosBenchmark -f stmt2_8.json -Z websocket -o /test_report/stmt2_ws_3
          echo "threads 8 stmt2_ws_3 done"
    
      - name: Get CPU cores
        run: echo "CORES=$(nproc)" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: result-cpu-${{ env.CORES }}-threads-8
          path: /test_report

  test_10threads:
    runs-on: ubuntu-latest
    needs: build
    name: test_10threads
    steps:
      - name: get cache server by push
        if: github.event_name == 'push'
        id: get-cache-server-push
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-libtaos-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ runner.os }}-build-libtaos-

      - name: cache server manually
        if: github.event_name == 'workflow_dispatch'
        id: get-cache-server-manually
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-${{ inputs.tbBranch }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ runner.os }}-build-${{ inputs.tbBranch }}-


      - name: install
        run: |
          sudo apt-get install libgoogle-perftools-dev libjansson-dev libsnappy-dev liblzma-dev zlib1g-dev
          tar -zxvf server.tar.gz
          cd release && sudo sh install.sh

      - name: checkout
        uses: actions/checkout@v4

      - name: copy taos cfg
        run: |
          sudo mkdir -p /etc/taos
          sudo cp ./.github/workflows/taos.cfg /etc/taos/taos.cfg
          sudo cp ./.github/workflows/taosadapter.toml /etc/taos/taosadapter.toml

      - name: shell
        run: |
          cat >start.sh<<EOF 
          ulimit -n 65535 && TAOS_SUPPORT_VNODES=256 taosd
          EOF

      - name: taosd
        run: nohup sudo sh ./start.sh &

      - name: start taosadapter
        run: sudo taosadapter &

      - name: prepare_dir
        run: |
          sudo mkdir -p /test_report
      - name: insert_and_query
        run: |
          echo "start insert and query test"
          sudo taosBenchmark -f insert_10.json -Z native -o /test_report/insert_native_1
          echo "threads 10 insert_native_1 done"
          sudo taosBenchmark -f insert_10.json -Z native -o /test_report/insert_native_2
          echo "threads 10 insert_native_2 done"
          sudo taosBenchmark -f insert_10.json -Z native -o /test_report/insert_native_3
          echo "threads 10 insert_native_3 done"
          sudo taosBenchmark -f insert_10.json -Z websocket -o /test_report/insert_ws_1
          echo "threads 10 insert_ws_1 done"
          sudo taosBenchmark -f insert_10.json -Z websocket -o /test_report/insert_ws_2
          echo "threads 10 insert_ws_2 done"
          sudo taosBenchmark -f insert_10.json -Z websocket -o /test_report/insert_ws_3
          echo "threads 10 insert_ws_3 done"
          sudo taosBenchmark -f query_10.json -Z native -o /test_report/query_native_1
          echo "threads 10 query_native_1 done"
          sudo taosBenchmark -f query_10.json -Z native -o /test_report/query_native_2
          echo "threads 10 query_native_2 done"
          sudo taosBenchmark -f query_10.json -Z native -o /test_report/query_native_3
          echo "threads 10 query_native_3 done"
          sudo taosBenchmark -f query_10.json -Z websocket -o /test_report/query_ws_1
          echo "threads 10 query_ws_1 done"
          sudo taosBenchmark -f query_10.json -Z websocket -o /test_report/query_ws_2
          echo "threads 10 query_ws_2 done"
          sudo taosBenchmark -f query_10.json -Z websocket -o /test_report/query_ws_3
          echo "threads 10 query_ws_3 done"
          sudo taosBenchmark -f stmt2_10.json -Z native -o /test_report/stmt2_native_1
          echo "threads 10 stmt2_native_1 done"
          sudo taosBenchmark -f stmt2_10.json -Z native -o /test_report/stmt2_native_2
          echo "threads 10 stmt2_native_2 done"
          sudo taosBenchmark -f stmt2_10.json -Z native -o /test_report/stmt2_native_3
          echo "threads 10 stmt2_native_3 done"
          sudo taosBenchmark -f stmt2_10.json -Z websocket -o /test_report/stmt2_ws_1
          echo "threads 10 stmt2_ws_1 done"
          sudo taosBenchmark -f stmt2_10.json -Z websocket -o /test_report/stmt2_ws_2
          echo "threads 10 stmt2_ws_2 done"
          sudo taosBenchmark -f stmt2_10.json -Z websocket -o /test_report/stmt2_ws_3
          echo "threads 10 stmt2_ws_3 done"
    
      - name: Get CPU cores
        run: echo "CORES=$(nproc)" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: result-cpu-${{ env.CORES }}-threads-10
          path: /test_report


  test_sub_1:
    runs-on: ubuntu-latest
    needs: build
    name: test_sub_1
    steps:
      - name: get cache server by push
        if: github.event_name == 'push'
        id: get-cache-server-push
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-libtaos-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ runner.os }}-build-libtaos-

      - name: cache server manually
        if: github.event_name == 'workflow_dispatch'
        id: get-cache-server-manually
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-${{ inputs.tbBranch }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ runner.os }}-build-${{ inputs.tbBranch }}-


      - name: install
        run: |
          sudo apt-get install libgoogle-perftools-dev libjansson-dev libsnappy-dev liblzma-dev zlib1g-dev
          tar -zxvf server.tar.gz
          cd release && sudo sh install.sh

      - name: checkout
        uses: actions/checkout@v4

      - name: copy taos cfg
        run: |
          sudo mkdir -p /etc/taos
          sudo cp ./.github/workflows/taos.cfg /etc/taos/taos.cfg
          sudo cp ./.github/workflows/taosadapter.toml /etc/taos/taosadapter.toml

      - name: shell
        run: |
          cat >start.sh<<EOF 
          ulimit -n 65535 && TAOS_SUPPORT_VNODES=256 taosd
          EOF

      - name: taosd
        run: nohup sudo sh ./start.sh &

      - name: start taosadapter
        run: sudo taosadapter &

      - name: prepare_dir
        run: |
          sudo mkdir -p /test_report
      - name: insert_and_query
        run: |
          echo "start insert and query test"
          sudo taosBenchmark -f stmt2_10.json -Z native
          echo "threads 10 stmt2_native_1 done"
          sudo taosBenchmark -f sub.json -Z native -o /test_report/sub_1
    
      - name: Get CPU cores
        run: echo "CORES=$(nproc)" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: result-cpu-${{ env.CORES }}-sub-1
          path: /test_report
  
  test_sub_1_ws:
    runs-on: ubuntu-latest
    needs: build
    name: test_sub_1_ws
    steps:
      - name: get cache server by push
        if: github.event_name == 'push'
        id: get-cache-server-push
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-libtaos-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ runner.os }}-build-libtaos-

      - name: cache server manually
        if: github.event_name == 'workflow_dispatch'
        id: get-cache-server-manually
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-${{ inputs.tbBranch }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ runner.os }}-build-${{ inputs.tbBranch }}-


      - name: install
        run: |
          sudo apt-get install libgoogle-perftools-dev libjansson-dev libsnappy-dev liblzma-dev zlib1g-dev
          tar -zxvf server.tar.gz
          cd release && sudo sh install.sh

      - name: checkout
        uses: actions/checkout@v4

      - name: copy taos cfg
        run: |
          sudo mkdir -p /etc/taos
          sudo cp ./.github/workflows/taos.cfg /etc/taos/taos.cfg
          sudo cp ./.github/workflows/taosadapter.toml /etc/taos/taosadapter.toml

      - name: shell
        run: |
          cat >start.sh<<EOF 
          ulimit -n 65535 && TAOS_SUPPORT_VNODES=256 taosd
          EOF

      - name: taosd
        run: nohup sudo sh ./start.sh &

      - name: start taosadapter
        run: sudo taosadapter &

      - name: prepare_dir
        run: |
          sudo mkdir -p /test_report
      - name: insert_and_query
        run: |
          echo "start insert and query test"
          sudo taosBenchmark -f stmt2_10.json -Z native
          echo "threads 10 stmt2_native_1 done"
          sudo taosBenchmark -f sub.json -Z websocket -o /test_report/sub_1
    
      - name: Get CPU cores
        run: echo "CORES=$(nproc)" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: result-cpu-${{ env.CORES }}-sub-1-ws
          path: /test_report

  test_sub_8:
    runs-on: ubuntu-latest
    needs: build
    name: test_sub_8
    steps:
      - name: get cache server by push
        if: github.event_name == 'push'
        id: get-cache-server-push
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-libtaos-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ runner.os }}-build-libtaos-

      - name: cache server manually
        if: github.event_name == 'workflow_dispatch'
        id: get-cache-server-manually
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-${{ inputs.tbBranch }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ runner.os }}-build-${{ inputs.tbBranch }}-


      - name: install
        run: |
          sudo apt-get install libgoogle-perftools-dev libjansson-dev libsnappy-dev liblzma-dev zlib1g-dev
          tar -zxvf server.tar.gz
          cd release && sudo sh install.sh

      - name: checkout
        uses: actions/checkout@v4

      - name: copy taos cfg
        run: |
          sudo mkdir -p /etc/taos
          sudo cp ./.github/workflows/taos.cfg /etc/taos/taos.cfg
          sudo cp ./.github/workflows/taosadapter.toml /etc/taos/taosadapter.toml

      - name: shell
        run: |
          cat >start.sh<<EOF 
          ulimit -n 65535 && TAOS_SUPPORT_VNODES=256 taosd
          EOF

      - name: taosd
        run: nohup sudo sh ./start.sh &

      - name: start taosadapter
        run: sudo taosadapter &

      - name: prepare_dir
        run: |
          sudo mkdir -p /test_report
      - name: insert_and_query
        run: |
          echo "start insert and query test"
          sudo taosBenchmark -f stmt2_10.json -Z native
          echo "threads 10 stmt2_native_1 done"
          sudo taosBenchmark -f sub_8.json -Z native -o /test_report/sub_8
    
      - name: Get CPU cores
        run: echo "CORES=$(nproc)" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: result-cpu-${{ env.CORES }}-sub-8
          path: /test_report


  test_sub_8_ws:
    runs-on: ubuntu-latest
    needs: build
    name: test_sub_8_ws
    steps:
      - name: get cache server by push
        if: github.event_name == 'push'
        id: get-cache-server-push
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-libtaos-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ runner.os }}-build-libtaos-

      - name: cache server manually
        if: github.event_name == 'workflow_dispatch'
        id: get-cache-server-manually
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-${{ inputs.tbBranch }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ runner.os }}-build-${{ inputs.tbBranch }}-


      - name: install
        run: |
          sudo apt-get install libgoogle-perftools-dev libjansson-dev libsnappy-dev liblzma-dev zlib1g-dev
          tar -zxvf server.tar.gz
          cd release && sudo sh install.sh

      - name: checkout
        uses: actions/checkout@v4

      - name: copy taos cfg
        run: |
          sudo mkdir -p /etc/taos
          sudo cp ./.github/workflows/taos.cfg /etc/taos/taos.cfg
          sudo cp ./.github/workflows/taosadapter.toml /etc/taos/taosadapter.toml

      - name: shell
        run: |
          cat >start.sh<<EOF 
          ulimit -n 65535 && TAOS_SUPPORT_VNODES=256 taosd
          EOF

      - name: taosd
        run: nohup sudo sh ./start.sh &

      - name: start taosadapter
        run: sudo taosadapter &

      - name: prepare_dir
        run: |
          sudo mkdir -p /test_report
      - name: insert_and_query
        run: |
          echo "start insert and query test"
          sudo taosBenchmark -f stmt2_10.json -Z native
          echo "threads 10 stmt2_native_1 done"
          sudo taosBenchmark -f sub_8.json -Z websocket -o /test_report/sub_8
    
      - name: Get CPU cores
        run: echo "CORES=$(nproc)" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: result-cpu-${{ env.CORES }}-sub-8-ws
          path: /test_report

  test_sub_10:
    runs-on: ubuntu-latest
    needs: build
    name: test_sub_10
    steps:
      - name: get cache server by push
        if: github.event_name == 'push'
        id: get-cache-server-push
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-libtaos-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ runner.os }}-build-libtaos-

      - name: cache server manually
        if: github.event_name == 'workflow_dispatch'
        id: get-cache-server-manually
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-${{ inputs.tbBranch }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ runner.os }}-build-${{ inputs.tbBranch }}-


      - name: install
        run: |
          sudo apt-get install libgoogle-perftools-dev libjansson-dev libsnappy-dev liblzma-dev zlib1g-dev
          tar -zxvf server.tar.gz
          cd release && sudo sh install.sh

      - name: checkout
        uses: actions/checkout@v4

      - name: copy taos cfg
        run: |
          sudo mkdir -p /etc/taos
          sudo cp ./.github/workflows/taos.cfg /etc/taos/taos.cfg
          sudo cp ./.github/workflows/taosadapter.toml /etc/taos/taosadapter.toml

      - name: shell
        run: |
          cat >start.sh<<EOF 
          ulimit -n 65535 && TAOS_SUPPORT_VNODES=256 taosd
          EOF

      - name: taosd
        run: nohup sudo sh ./start.sh &

      - name: start taosadapter
        run: sudo taosadapter &

      - name: prepare_dir
        run: |
          sudo mkdir -p /test_report
      - name: insert_and_query
        run: |
          echo "start insert and query test"
          sudo taosBenchmark -f stmt2_10.json -Z native
          echo "threads 10 stmt2_native_1 done"
          sudo taosBenchmark -f sub_10.json -Z native -o /test_report/sub_10
    
      - name: Get CPU cores
        run: echo "CORES=$(nproc)" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: result-cpu-${{ env.CORES }}-sub-10
          path: /test_report


  test_sub_10_ws:
    runs-on: ubuntu-latest
    needs: build
    name: test_sub_10_ws
    steps:
      - name: get cache server by push
        if: github.event_name == 'push'
        id: get-cache-server-push
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-libtaos-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ runner.os }}-build-libtaos-

      - name: cache server manually
        if: github.event_name == 'workflow_dispatch'
        id: get-cache-server-manually
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ runner.os }}-build-${{ inputs.tbBranch }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ runner.os }}-build-${{ inputs.tbBranch }}-


      - name: install
        run: |
          sudo apt-get install libgoogle-perftools-dev libjansson-dev libsnappy-dev liblzma-dev zlib1g-dev
          tar -zxvf server.tar.gz
          cd release && sudo sh install.sh

      - name: checkout
        uses: actions/checkout@v4

      - name: copy taos cfg
        run: |
          sudo mkdir -p /etc/taos
          sudo cp ./.github/workflows/taos.cfg /etc/taos/taos.cfg
          sudo cp ./.github/workflows/taosadapter.toml /etc/taos/taosadapter.toml

      - name: shell
        run: |
          cat >start.sh<<EOF 
          ulimit -n 65535 && TAOS_SUPPORT_VNODES=256 taosd
          EOF

      - name: taosd
        run: nohup sudo sh ./start.sh &

      - name: start taosadapter
        run: sudo taosadapter &

      - name: prepare_dir
        run: |
          sudo mkdir -p /test_report
      - name: insert_and_query
        run: |
          echo "start insert and query test"
          sudo taosBenchmark -f stmt2_10.json -Z native
          echo "threads 10 stmt2_native_1 done"
          sudo taosBenchmark -f sub_10.json -Z websocket -o /test_report/sub_10
    
      - name: Get CPU cores
        run: echo "CORES=$(nproc)" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: result-cpu-${{ env.CORES }}-sub-10-ws
          path: /test_report
